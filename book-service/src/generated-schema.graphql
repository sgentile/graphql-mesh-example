# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateBook {
  _avg: BookAvgAggregate
  _count: BookCountAggregate
  _max: BookMaxAggregate
  _min: BookMinAggregate
  _sum: BookSumAggregate
}

type Book {
  authorId: Int!
  id: Int!
  name: String
}

type BookAvgAggregate {
  authorId: Float
  id: Float
}

input BookAvgOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
}

type BookCountAggregate {
  _all: Int!
  authorId: Int!
  id: Int!
  name: Int!
}

input BookCountOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  name: SortOrder
}

input BookCreateInput {
  authorId: Int!
  name: String
}

type BookGroupBy {
  _avg: BookAvgAggregate
  _count: BookCountAggregate
  _max: BookMaxAggregate
  _min: BookMinAggregate
  _sum: BookSumAggregate
  authorId: Int!
  id: Int!
  name: String
}

type BookMaxAggregate {
  authorId: Int
  id: Int
  name: String
}

input BookMaxOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  name: SortOrder
}

type BookMinAggregate {
  authorId: Int
  id: Int
  name: String
}

input BookMinOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
  name: SortOrder
}

input BookOrderByWithAggregationInput {
  _avg: BookAvgOrderByAggregateInput
  _count: BookCountOrderByAggregateInput
  _max: BookMaxOrderByAggregateInput
  _min: BookMinOrderByAggregateInput
  _sum: BookSumOrderByAggregateInput
  authorId: SortOrder
  id: SortOrder
  name: SortOrder
}

input BookOrderByWithRelationInput {
  authorId: SortOrder
  id: SortOrder
  name: SortOrder
}

enum BookScalarFieldEnum {
  authorId
  id
  name
}

input BookScalarWhereWithAggregatesInput {
  AND: [BookScalarWhereWithAggregatesInput!]
  NOT: [BookScalarWhereWithAggregatesInput!]
  OR: [BookScalarWhereWithAggregatesInput!]
  authorId: IntWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
}

type BookSumAggregate {
  authorId: Int
  id: Int
}

input BookSumOrderByAggregateInput {
  authorId: SortOrder
  id: SortOrder
}

input BookUpdateInput {
  authorId: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input BookUpdateManyMutationInput {
  authorId: IntFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input BookWhereInput {
  AND: [BookWhereInput!]
  NOT: [BookWhereInput!]
  OR: [BookWhereInput!]
  authorId: IntFilter
  id: IntFilter
  name: StringNullableFilter
}

input BookWhereUniqueInput {
  id: Int
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createBook(data: BookCreateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBook(where: BookWhereInput): AffectedRowsOutput!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBook(data: BookUpdateManyMutationInput!, where: BookWhereInput): AffectedRowsOutput!
  upsertBook(create: BookCreateInput!, update: BookUpdateInput!, where: BookWhereUniqueInput!): Book!
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateBook(cursor: BookWhereUniqueInput, orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): AggregateBook!
  book(where: BookWhereUniqueInput!): Book
  books(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): [Book!]!
  findFirstBook(cursor: BookWhereUniqueInput, distinct: [BookScalarFieldEnum!], orderBy: [BookOrderByWithRelationInput!], skip: Int, take: Int, where: BookWhereInput): Book
  groupByBook(by: [BookScalarFieldEnum!]!, having: BookScalarWhereWithAggregatesInput, orderBy: [BookOrderByWithAggregationInput!], skip: Int, take: Int, where: BookWhereInput): [BookGroupBy!]!
}

enum SortOrder {
  asc
  desc
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}
